import { NumOptions } from "./types/NumOptions";
/**
 * A class providing information about a number.
 */
export declare class Num {
    /**
     * The base that the number is in.
     * @private
     */
    private _base;
    /**
     * The base that the number is in.
     */
    get base(): number;
    /**
     * The base 10 number that this Num is using. This number is always positive, regardless of input.
     * @private
     */
    private readonly _number;
    /**
     * If the number is negative.
     * @private
     */
    private readonly _isNegative;
    /**
     * A cache of all conversions to other number systems.
     * base|precision: numberStr
     * @private
     */
    private _cache;
    /**
     * Turn a base 10 number into a Num.
     * @param num {number} - is the number which will be used.
     * @constructor
     */
    constructor(num: NumOptions | number | string);
    /**
     * Converts the num to another number system and places it in the cache.
     * @param base {number} - is the base being converted to.
     * @param precision {number} - is the maximum decimal places a decimal should have.
     * @private
     */
    private Convert;
    /**
     * Converts a num to another number system in place.
     * @param base {number} - is the base that this Num will be converted to.
     */
    toBase(base: number): Num;
    /**
     * Convert this Num to a string. If `isDecimal` is `true`, then each decimal digit will be encased in brackets.
     * For example, `[1.01] 1.1` means `{digits: ["1.01", "1"], decimals: ["1"]}`.
     *
     * If `isDecimal` is `false`, then it will be turned into a normal number string.
     * @param precision {number} - is the maximum decimal places a decimal should have.
     */
    toString(precision?: number): string;
    /**
     * Converts the result of toString to a number.
     * @param precision {number} - is the maximum decimal places a decimal should have.
     */
    toNumber(precision?: number): number;
}
